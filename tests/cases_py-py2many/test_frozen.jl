using Test
#= Basic test of the frozen module (source is in Python/frozen.c). =#



mutable struct TestFrozen <: AbstractTestFrozen

end
function test_frozen(self::AbstractTestFrozen)
name = "__hello__"
if name in sys.modules
sys.modules[name]!
end
captured_stdout() do out 
import __hello__
end
@test (getvalue(out) == "Hello world!\n")
end

function main()
test_numbers = TestNumbers()
test_int(test_numbers)
test_float(test_numbers)
test_complex(test_numbers)
aug_assign_test = AugAssignTest()
testBasic(aug_assign_test)
testInList(aug_assign_test)
testInDict(aug_assign_test)
testSequences(aug_assign_test)
testCustomMethods2(aug_assign_test)
legacy_base64_test_case = LegacyBase64TestCase()
check_type_errors(legacy_base64_test_case)
test_encodebytes(legacy_base64_test_case)
test_decodebytes(legacy_base64_test_case)
test_encode(legacy_base64_test_case)
test_decode(legacy_base64_test_case)
base_x_y_test_case = BaseXYTestCase()
check_encode_type_errors(base_x_y_test_case)
check_decode_type_errors(base_x_y_test_case)
check_other_types(base_x_y_test_case)
check_multidimensional(base_x_y_test_case)
check_nonbyte_element_format(base_x_y_test_case)
test_b64encode(base_x_y_test_case)
test_b64decode(base_x_y_test_case)
test_b64decode_padding_error(base_x_y_test_case)
test_b64decode_invalid_chars(base_x_y_test_case)
test_b32encode(base_x_y_test_case)
test_b32decode(base_x_y_test_case)
test_b32decode_casefold(base_x_y_test_case)
test_b32decode_error(base_x_y_test_case)
test_b32hexencode(base_x_y_test_case)
test_b32hexencode_other_types(base_x_y_test_case)
test_b32hexdecode(base_x_y_test_case)
test_b32hexdecode_other_types(base_x_y_test_case)
test_b32hexdecode_error(base_x_y_test_case)
test_b16encode(base_x_y_test_case)
test_b16decode(base_x_y_test_case)
test_a85encode(base_x_y_test_case)
test_b85encode(base_x_y_test_case)
test_a85decode(base_x_y_test_case)
test_b85decode(base_x_y_test_case)
test_a85_padding(base_x_y_test_case)
test_b85_padding(base_x_y_test_case)
test_a85decode_errors(base_x_y_test_case)
test_b85decode_errors(base_x_y_test_case)
test_decode_nonascii_str(base_x_y_test_case)
test_ErrorHeritage(base_x_y_test_case)
test_RFC4648_test_cases(base_x_y_test_case)
test_main = TestMain()
tearDown(test_main)
get_output(test_main)
test_encode_decode(test_main)
test_encode_file(test_main)
test_encode_from_stdin(test_main)
test_decode(test_main)
bin_hex_test_case = BinHexTestCase()
setUp(bin_hex_test_case)
tearDown(bin_hex_test_case)
test_binhex(bin_hex_test_case)
test_binhex_error_on_long_filename(bin_hex_test_case)
test_binhex_line_endings(bin_hex_test_case)
rat_test_case = RatTestCase()
test_gcd(rat_test_case)
test_constructor(rat_test_case)
test_add(rat_test_case)
test_sub(rat_test_case)
test_mul(rat_test_case)
test_div(rat_test_case)
test_floordiv(rat_test_case)
test_eq(rat_test_case)
test_true_div(rat_test_case)
operation_order_tests = OperationOrderTests()
test_comparison_orders(operation_order_tests)
fallback_blocking_tests = FallbackBlockingTests()
test_fallback_rmethod_blocking(fallback_blocking_tests)
test_fallback_ne_blocking(fallback_blocking_tests)
output_test_case = OutputTestCase()
normalize_calendar(output_test_case)
check_htmlcalendar_encoding(output_test_case)
test_output(output_test_case)
test_output_textcalendar(output_test_case)
test_output_htmlcalendar_encoding_ascii(output_test_case)
test_output_htmlcalendar_encoding_utf8(output_test_case)
test_output_htmlcalendar_encoding_default(output_test_case)
test_yeardatescalendar(output_test_case)
test_yeardayscalendar(output_test_case)
test_formatweekheader_short(output_test_case)
test_formatweekheader_long(output_test_case)
test_formatmonth(output_test_case)
test_formatmonthname_with_year(output_test_case)
test_formatmonthname_without_year(output_test_case)
test_prweek(output_test_case)
test_prmonth(output_test_case)
test_pryear(output_test_case)
test_format(output_test_case)
calendar_test_case = CalendarTestCase()
test_isleap(calendar_test_case)
test_setfirstweekday(calendar_test_case)
test_illegal_weekday_reported(calendar_test_case)
test_enumerate_weekdays(calendar_test_case)
test_days(calendar_test_case)
test_months(calendar_test_case)
test_locale_calendars(calendar_test_case)
test_locale_html_calendar_custom_css_class_month_name(calendar_test_case)
test_locale_html_calendar_custom_css_class_weekday(calendar_test_case)
test_itermonthdays3(calendar_test_case)
test_itermonthdays4(calendar_test_case)
test_itermonthdays(calendar_test_case)
test_itermonthdays2(calendar_test_case)
month_calendar_test_case = MonthCalendarTestCase()
setUp(month_calendar_test_case)
tearDown(month_calendar_test_case)
check_weeks(month_calendar_test_case)
timegm_test_case = TimegmTestCase()
test_timegm(timegm_test_case)
month_range_test_case = MonthRangeTestCase()
test_january(month_range_test_case)
test_february_leap(month_range_test_case)
test_february_nonleap(month_range_test_case)
test_december(month_range_test_case)
test_zeroth_month(month_range_test_case)
test_thirteenth_month(month_range_test_case)
test_illegal_month_reported(month_range_test_case)
leapdays_test_case = LeapdaysTestCase()
test_no_range(leapdays_test_case)
test_no_leapdays(leapdays_test_case)
test_no_leapdays_upper_boundary(leapdays_test_case)
test_one_leapday_lower_boundary(leapdays_test_case)
test_several_leapyears_in_range(leapdays_test_case)
command_line_test_case = CommandLineTestCase()
run_ok(command_line_test_case)
assertFailure(command_line_test_case)
test_help(command_line_test_case)
test_illegal_arguments(command_line_test_case)
test_output_current_year(command_line_test_case)
test_output_year(command_line_test_case)
test_output_month(command_line_test_case)
test_option_encoding(command_line_test_case)
test_option_locale(command_line_test_case)
test_option_width(command_line_test_case)
test_option_lines(command_line_test_case)
test_option_spacing(command_line_test_case)
test_option_months(command_line_test_case)
test_option_type(command_line_test_case)
test_html_output_current_year(command_line_test_case)
test_html_output_year_encoding(command_line_test_case)
test_html_output_year_css(command_line_test_case)
misc_test_case = MiscTestCase()
test__all__(misc_test_case)
test_sub_classing_case = TestSubClassingCase()
setUp(test_sub_classing_case)
test_formatmonthname(test_sub_classing_case)
test_formatmonth(test_sub_classing_case)
test_formatweek(test_sub_classing_case)
test_formatweek_head(test_sub_classing_case)
test_format_year(test_sub_classing_case)
test_format_year_head(test_sub_classing_case)
comparison_test = ComparisonTest()
test_comparisons(comparison_test)
test_id_comparisons(comparison_test)
test_ne_defaults_to_not_eq(comparison_test)
test_ne_high_priority(comparison_test)
test_ne_low_priority(comparison_test)
test_other_delegation(comparison_test)
test_issue_1393(comparison_test)
test_default_dict = TestDefaultDict()
test_basic(test_default_dict)
test_missing(test_default_dict)
test_repr(test_default_dict)
test_copy(test_default_dict)
test_shallow_copy(test_default_dict)
test_deep_copy(test_default_dict)
test_keyerror_without_factory(test_default_dict)
test_recursive_repr(test_default_dict)
test_callable_arg(test_default_dict)
test_pickling(test_default_dict)
test_union(test_default_dict)
dict_version_tests = DictVersionTests()
setUp(dict_version_tests)
check_version_unique(dict_version_tests)
check_version_changed(dict_version_tests)
check_version_dont_change(dict_version_tests)
new_dict(dict_version_tests)
test_constructor(dict_version_tests)
test_copy(dict_version_tests)
test_setitem(dict_version_tests)
test_setitem_same_value(dict_version_tests)
test_setitem_equal(dict_version_tests)
test_setdefault(dict_version_tests)
test_delitem(dict_version_tests)
test_pop(dict_version_tests)
test_popitem(dict_version_tests)
test_update(dict_version_tests)
test_clear(dict_version_tests)
enumerate_test_case = EnumerateTestCase()
test_basicfunction(enumerate_test_case)
test_pickle(enumerate_test_case)
test_getitemseqn(enumerate_test_case)
test_iteratorseqn(enumerate_test_case)
test_iteratorgenerator(enumerate_test_case)
test_noniterable(enumerate_test_case)
test_illformediterable(enumerate_test_case)
test_exception_propagation(enumerate_test_case)
test_argumentcheck(enumerate_test_case)
test_tuple_reuse(enumerate_test_case)
test_enumerate_result_gc(enumerate_test_case)
test_reversed = TestReversed()
test_simple(test_reversed)
test_range_optimization(test_reversed)
test_len(test_reversed)
test_gc(test_reversed)
test_args(test_reversed)
test_bug1229429(test_reversed)
test_objmethods(test_reversed)
test_pickle(test_reversed)
e_o_f_test_case = EOFTestCase()
test_EOF_single_quote(e_o_f_test_case)
test_EOFS(e_o_f_test_case)
test_EOFS_with_file(e_o_f_test_case)
test_eof_with_line_continuation(e_o_f_test_case)
test_line_continuation_EOF(e_o_f_test_case)
test_line_continuation_EOF_from_file_bpo2180(e_o_f_test_case)
format_test = FormatTest()
test_common_format(format_test)
test_str_format(format_test)
test_bytes_and_bytearray_format(format_test)
test_nul(format_test)
test_non_ascii(format_test)
test_locale(format_test)
test_optimisations(format_test)
test_precision(format_test)
test_precision_c_limits(format_test)
test_g_format_has_no_trailing_zeros(format_test)
test_with_two_commas_in_format_specifier(format_test)
test_with_two_underscore_in_format_specifier(format_test)
test_with_a_commas_and_an_underscore_in_format_specifier(format_test)
test_with_an_underscore_and_a_comma_in_format_specifier(format_test)
fraction_test = FractionTest()
assertTypedEquals(fraction_test)
assertTypedTupleEquals(fraction_test)
assertRaisesMessage(fraction_test)
testInit(fraction_test)
testInitFromFloat(fraction_test)
testInitFromDecimal(fraction_test)
testFromString(fraction_test)
testImmutable(fraction_test)
testFromFloat(fraction_test)
testFromDecimal(fraction_test)
test_as_integer_ratio(fraction_test)
testLimitDenominator(fraction_test)
testConversions(fraction_test)
testBoolGuarateesBoolReturn(fraction_test)
testRound(fraction_test)
testArithmetic(fraction_test)
testLargeArithmetic(fraction_test)
testMixedArithmetic(fraction_test)
testMixingWithDecimal(fraction_test)
testComparisons(fraction_test)
testComparisonsDummyRational(fraction_test)
testComparisonsDummyFloat(fraction_test)
testMixedLess(fraction_test)
testMixedLessEqual(fraction_test)
testBigFloatComparisons(fraction_test)
testBigComplexComparisons(fraction_test)
testMixedEqual(fraction_test)
testStringification(fraction_test)
testHash(fraction_test)
testApproximatePi(fraction_test)
testApproximateCos1(fraction_test)
test_copy_deepcopy_pickle(fraction_test)
test_slots(fraction_test)
test_int_subclass(fraction_test)
test_frozen = TestFrozen()
test_frozen(test_frozen)
end

main()
abstract type AbstractTestFrozen end
